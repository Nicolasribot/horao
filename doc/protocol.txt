This is a simple spec sheet for the simple 3d viewer.

- layers can be added/removed (viewed or hidden) using their ID
- effects (shaders) can be added/removed using a name
- raster data are draped on a vector layer
- 3D models come either from postgis DB or from file
- data loading can be long, so the interpreter/loader and the viewer will run in different threads, nodes will be added to the scenegraph when ready.

The general syntax for commands is:
command_name arg1="value1" arg2="value2" ...

- the command is interpreted at the end of the line with the character "\n"
- values are XML attributes. It follows the rules of XML attribute escaping (&quot; for double quotes, etc.)

Each command returns a line giving their status, with the following syntax :
- in case of success :
<ok ret_arg1="value1" ret_arg2="value2" ... />
- return arguments are optional
- in case of failure :
<error msg="error message" (other optional arguments are accepted) />

List of available commands :

loadVectorPostGIS
==========

Load a vector layer from disk/db and add it to the scene

arguments :
-----------

* id (mandatory)

* conninfo="dbname='' host='' user=''"
* origin="x y z"
* extent="xmin ymin,xmax ymax"

without LOD:
* query="SQL query"

with LOD:
* lod="lod_distance_level1 lod_distance_level2 ..." (from the further to the nearest)
* tile_size=
* query_0=""
* query_1=""

options:
* geocolumn= name of the geometry column (geom by default)
* file= elevation file to drape objects on

loadRasterGDAL
==========

arguments :
-----------

* id (mandatory)

* url
* drape_on="layer_id" vector/elevation layer id where raster will be draped on. If not present, a new plane layer with z=0 will be created


loadElevation
=============

Build a terrain, based on a raster with altitude data

arguments:
----------

* driver (mandatory): only "gdal" for now.
* id (mandatory)
* origin
* extent
* file= GDAL file. It will load the .ive (generated from osgdem) if present

without LOD:
* mesh_size

with LOD:
* tile_size
* lod="lod_altitude_1 lod_altitude_2 ..." (from the further to the nearest)
* mesh_size_0
* mesh_size_1
* ...

loadFile
========

Load an OSG file

arguments:
----------

* id
* file : file path
* origin

unloadLayer
===========

Unload a layer. 

arguments:
----------

* id (mandatory): layer id to unload

showLayer
=========

Force the display of a layer

arguments:
----------

* id (mandatory): layer id to show

hideLayer
=========

Force a layer to disappear. The layer is not unloaded. It can be showed afterward.

arguments:
----------

* id (mandatory): layer id to show

setSymbology
============

Sets the symbology of a (vector) layer

arguments:
----------

* id (mandatory): layer id to modify

fill_color_ambient="#rrggbb"
fill_color_diffuse="#rrggbb"
fill_color_specular="#rrggbb"
fill_color_shininess=float between 0 and 1
...

setFullExtent
=============

Sets the full extent of the scene and the global SRID

arguments:
----------

srid (mandatory): EPSG code for the global SRID
x_min (mandatory)
x_max (mandatory)
y_min (mandatory)
y_max (mandatory)

lookAt
======

Sets the camera parameters

arguments:
----------

eye="x y z"
center="x y z"
up="x y z"


or

origin="x y z"
extent="xmin ymin,xmax ymax"

addEffect
=========

Add an effect on the scene. Effects can be global or applied on a specific layer

arguments:
----------

* name (mandatory): name of the effect to apply
* id: optional layer id to apply the effect on

removeEffect
============

Remove an effect

arguments:
----------

* name (mandatory)
* id: optional layer id to remove the effect from

addPlane
========

Adds a simple plane to the scene

arguments:
----------

* id
* origin
* extent

